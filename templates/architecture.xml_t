<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<architecture name="IIKA">
	<registers>
		<!-- %は特殊文字として扱われるためとしてエスケープする -->
		<intRegs num="32" prefix="%%g"/>
		<floatRegs num="32" prefix="%%f"/>
		<constFloatRegs num="16"/>
		<zeroReg index="0"/>
		<frameReg index="1"/>
		<heapReg index="2"/>
		<oneReg index="29"/>
		<minusOneReg index="30"/>
		<!-- indexを""にすると汎用レジスタとは別に用意されたレジスタが使われる -->
		<linkReg index="31"/>
	</registers>
	<RAM size="8.0" />
	<comment text="!"/>

	<!-- constTableType -->
	<!-- ヒープ初期化部分と命令データを別ファイルに書き込む -->
	<binary endian="LITTLE" constTableType="writeSize" tag="0xffFFffFF" addressing="byte" direction=""/>
	
	<!-- 固定する機能（命令形式など）はこのファイルには書かない（ミスリードになるから） -->
	<!-- op, functともに６ビット(0 ~ 63) -->
	<instructions forward="true">
		<CONST>
			<SPECIAL value="0"/>
			<FPI value="1"/>
			<IO value="2"/>
		</CONST>
		<!-- ireg <- op ireg -->
		<MOV use="false" name="Imov" op="SPECIAL" funct="0" explain="値のコピー"/>

		<!-- regi op regi -->
		<ADD name="Iadd" op="SPECIAL" funct="1" explain="整数同士の足し算"/>
		<SUB name="Isub" op="SPECIAL" funct="2" explain="整数同士の引き算"/>
		<MUL name="Imul"  op="SPECIAL" funct="3" explain="整数同士の掛け算"/>
		<DIV use="false" name="Idiv"  op="SPECIAL" funct="4" explain="整数同士の割り算"/>
		<SLL name="Isll" op="SPECIAL" funct="5" explain="論理左シフト"/>
		<SLA use="false" name="Isla" op="SPECIAL" funct="6" explain="算術左シフト"/>
		<SRL use="false" name="Isrll" op="SPECIAL" funct="7" explain="論理右シフト"/>
		<SRA name="Isrl" op="SPECIAL" funct="8" explain="算術右シフト"/>
		<AND use="false" name="Iand" op="SPECIAL" funct="9" explain="論理積"/>
		<OR use="false" name="Ior" op="SPECIAL" funct="10" explain="論理和"/>
		<NOR name="Inor" op="SPECIAL" funct="50" explain="論理和"/>
		<XOR use="false" name="Ixor" op="SPECIAL" funct="12" explain="排他的論理和"/>
		<NOT name="Inot" op="SPECIAL" funct="11" explain="論理否定"/>

		<!-- regi op imm -->
		<ADDI name="Iaddi" op="3" explain="整数同士の足し算(即値)"/>
		<SUBI name="Isubi" op="4" explain="整数同士の引き算(即値)"/>
		<MULI name="Imuli" op="5" explain="整数同士の掛け算(即値)"/>
		<DIVI use="false" name="Idivi" op="6" explain="整数同士の割り算(即値)"/>
		<SLLI name="Islli" op="7" explain="論理左シフト(即値)"/>
		<SLAI use="false" name="Islai" op="8" explain="算術左シフト(即値)"/>
		<SRLI use="false" name="Isrlli" op="9" explain="論理右シフト(即値)"/>
		<SRAI name="Isrli" op="10" explain="算術右シフト(即値)"/>
		<ANDI use="false" name="Iandi" op="11" explain="論理積(即値)"/>
		<ORI use="false" name="Iori" op="12" explain="論理和(即値)"/>
		<NORI use="false" name="Inori" op="50" explain="論理和(即値)"/>
		<XORI use="false" name="Ixori" op="13" explain="排他的論理和(即値)"/>

		<!-- regf op regf -->
		<FADD name="Ifadd" op="FPI" funct="0" explain="浮動小数点数同士の足し算"/>
		<FSUB name="Ifsub" op="FPI" funct="1" explain="浮動小数点数同士の引き算"/>
		<FMUL name="Ifmul" op="FPI" funct="2" explain="浮動小数点数同士の掛け算"/>
		<FDIV name="Ifdiv" op="FPI" funct="3" explain="浮動小数点数同士の割り算"/>

		<!-- op regf -->
		<FINV use="false" name="Ifinv" op="FPI" funct="4" explain="浮動小数点数の逆数"/>
		<FSQRT name="Ifsqrt" op="FPI" funct="5" explain="浮動小数点数の平方根"/>
		<FABS name="Ifabs" op="FPI" funct="6" explain="浮動小数点数の絶対値"/>
		<FMOV name="Ifmov" op="FPI" funct="7" explain="memcpy"/>
		<FNEG name="Ifneg" op="FPI" funct="8" explain="浮動小数点数の符号反転"/>
		<FLOOR use="false" name="Ifloor" op="FPI" funct="9" explain="浮動小数点数同士の割り算"/>
		<FSIN use="false" name="Ifsin" op="FPI" funct="10" explain="正弦"/>
		<FCOS use="false" name="Ifcos" op="FPI" funct="11" explain="余弦"/>
		<FTAN use="false" name="Iftan" op="FPI" funct="12" explain="正接"/>
		<FATAN use="false" name="Ifatan" op="FPI" funct="13" explain="逆正接"/>

		<!-- ireg <- op ireg-->
		<ITOF use="false" name="Iitof" op="FPI" funct="14" explain="int_of_float"/>
		<IMOVF use="false" name="Iimvf" op="FPI" funct="15" explain="memcpy"/>

		<!-- freg <- op ireg-->
		<FTOI use="false" name="Iftoi" op="FPI" funct="16" explain="float_of_int"/>
		<FMOVI use="false" name="Ifmvi" op="FPI" funct="17" explain="memcpy"/>

		<!-- SET -->
		<SETLO name="Imvlo" op="14" explain="整数レジスタ下位16ビットに即値代入"/>
		<SETHI name="Imvhi" op="15" explain="整数レジスタ上位16ビットに即値代入"/>
		<FSETLO name="Ifmvlo" op="16" explain="浮動小数レジスタ下位16ビットに即値代入"/>
		<FSETHI name="Ifmvhi" op="17" explain="浮動小数レジスタ上位16ビットに即値代入"/>

		<!-- branch -->
		<BRANCH name="Ijmp" op="18" explain="無条件分岐"/>
		<BEQ name="Ijeq" op="19" addressMode="relative" explain="条件分岐(=)"/>
		<BNE name="Ijne" op="20" addressMode="relative" explain="条件分岐(＜＞)"/>
		<BLT name="Ijlt" op="21" addressMode="relative" explain="条件分岐(＜)"/>
		<BLE use="false" name="Ijle" addressMode="relative" op="22" explain="条件分岐(＜=)"/>
		<BGT use="false" name="Ijgt" addressMode="relative" op="23" explain="条件分岐(＞)"/>
		<BGE use="false" name="Ijge" addressMode="relative" op="24" explain="条件分岐(＜=)"/>

		<!-- branch float -->
		<FBEQ name="Ifjeq" op="25" addressMode="relative" explain="浮動小数の条件分岐(=)"/>
		<FBNE name="Ifjne" op="26" addressMode="relative" explain="浮動小数の条件分岐(＜＞)"/>
		<FBLT name="Ifjlt" op="27" addressMode="relative" explain="浮動小数の条件分岐(＜)"/>
		<FBLE use="false" name="Ifjle" op="28" addressMode="relative" explain="浮動小数の条件分岐(＜=)"/>
		<FBGT use="false" name="Ifjgt" op="29" addressMode="relative" explain="浮動小数の条件分岐(＞)"/>
		<FBGE use="false" name="Ifjge" op="30" addressMode="relative" explain="浮動小数の条件分岐(＞=)"/>

		<!-- jmp, call, return -->
		<JMPREG name="Ib" op="SPECIAL" funct="13" explain="レジスタの値へジャンプ"/>

		<JMP_LNK name="Ijal" op="41" explain="リンクレジスタを退避してラベルへジャンプ"/>
		<JMPREG_LNK name="Ijarl" op="SPECIAL" funct="18" explain="リンクレジスタを退避してレジスタの値へジャンプ"/>

		<CALL name="Icall" op="31" explain="関数呼び出し"/>
		<CALLREG name="IcallR" op="SPECIAL" funct="14" explain="クロージャ呼び出し"/>
		<RETURN name="Ireturn" op="32" explain="関数呼び出しから返る"/>

		<!-- memory access -->
		<ST name="Ist" op="33" explain="整数ストア"/>
		<LD name="Ild" op="34" explain="整数ロード"/>
		<FST name="Ifst" op="35" explain="浮動小数ストア"/>
		<FLD name="Ifld" op="36" explain="浮動小数ロード"/>
		<STI name="Isti" op="37" explain="整数ストア(即値)"/>
		<LDI name="Ildi" op="38" explain="整数ロード(即値)"/>
		<FSTI name="Ifsti" op="39" explain="浮動小数ストア(即値)"/>
		<FLDI name="Ifldi" op="40"  explain="浮動小数ロード(即値)"/>

		<!-- I/O -->
		<INPUTBYTE name="Iinput" op="IO" funct="0" explain="１バイトを整数レジスタ入力"/>
		<INPUTWORD use="false" name="Iinputw" op="IO" funct="1" explain="4バイトを整数レジスタに入力"/>
		<INPUTFLOAT use="false" name="Iinputf" op="IO" funct="2" explain="4バイトを浮動小数レジスタ入力"/>
		<OUTPUTBYTE name="Ioutput" op="IO" funct="3" explain="下位１バイトを出力"/>
		<OUTPUTWORD use="false" name="Ioutputw" op="IO" funct="4" explain="整数レジスタ4バイトを出力"/>
		<OUTPUTFLOAT use="false" name="Ioutputf" op="IO" funct="5" explain="浮動小数レジスタ4バイトを出力"/>

		<!-- others -->
		<HALT name="Ihalt" op="SPECIAL" funct="15" explain="プログラム終了"/>

		<!-- mnemonic -->
		<mnemonics>
			<NOP name="Inop" formAsm="">
				<inst command="&quot;Iadd\t%%g0, %%g0, %%g0&quot;"/>
			</NOP>
			<MOV name="Imov" formAsm="IRT, IRS">
				<inst command="&quot;Iadd\t%%g%d, %%g%d, %%g0&quot;, rt, rs"/>
			</MOV>
			<NOT use="false" formAsm="IRT, IRS">
				<inst command="&quot;Inor\t%%g%d, %%g%d, %%g0&quot;, rt, rs, rs" />
			</NOT>
			<NEG name="Ineg" formAsm="IRT, IRS">
				<inst command="&quot;Isub\t%%g%d, %%g0, %%g%d&quot;, rt, rs"/>
			</NEG>
			<SETL name="IsetL" formAsm="IRS, LABEL">
				<inst useLabel="true" command="&quot;Iaddi\t%%g%d, %%g0, 0&quot;, rs"/>
			</SETL>
			<!-- fset %f0, 0.1 -->
			<!-- Dはdouble型の即値を表す -->
			<FSET name="Ifset" formAsm="FRS, FLOAT">
				<inst command="&quot;Ifmvhi\t%%f%d, %d&quot;, rs, gethi(d)"/>
				<inst command="&quot;Ifmvlo\t%%f%d, %d&quot;, rs, getlo(d)"/>
			</FSET>
		</mnemonics>
	</instructions>
</architecture>
