<%
	romSize = xmlroot.find(".//RAM").get("size")
	intRegNum = xmlroot.find(".//intRegs").get("num")
	floatRegNum = xmlroot.find(".//floatRegs").get("num")

	def getInst(type):
		inst = xmlroot.find(".//" + type)
		assert inst is not None, "inst is None(" + type + ")"
		return inst
	
	def getName(type):
		name = getInst(type).get("name")
		name is not None, "name is None(" + type + ")"
		return name
	
	def getOp(type):
		op = getInst(type).get("op")
		op is not None, "op is None(" + type + ")"
		return op
			
	def getFunct(type):
		return getInst(type).get("funct")

	def isUse(type):
		use = getInst(type).get("use", "true")
		return use != "false"
%>#ifndef _COMMON_H
#define _COMMON_H

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <unistd.h>
#include <sys/types.h>
#include <vector>
#include <map>
#define rep(i, n) for (int i = 0; i < n; i++)
#define repi(i, n) for (int i = 1; i < n; i++)
#define eq(a, b) (strcmp(a, b) == 0)

#define ROM_NUM (64 * 1024) // 64KByte
#define RAM_NUM (${romSize})

#define MAX_INSTS 64 // 6bit

#define INTREG_NUM (${intRegNum})
#define FLOATREG_NUM (${floatRegNum})

% for constNum in xmlroot.find(".//CONST"):
#define ${constNum.tag} (${constNum.get("value")})
% endfor
% for inst in instInfo:
	% if isUse(inst["type"]):
		% if not getOp(inst["type"]).isalpha():
#define ${getName(inst["type"]).upper()} (${getOp(inst["type"])})
		% endif
		% if (getFunct(inst["type"]) is not None) and (not getFunct(inst["type"]).isalpha()):
#define ${getName(inst["type"]).upper()}_F (${getFunct(inst["type"])})
		% endif
	% endif
% endfor

using namespace std;
#endif
