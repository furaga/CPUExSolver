<%
	romSize = xmlroot.find(".//RAM").get("size")
	intRegNum = xmlroot.find(".//intRegs").get("num")
	floatRegNum = xmlroot.find(".//floatRegs").get("num")
%>#ifndef _COMMON_H
#define _COMMON_H

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <unistd.h>
#include <sys/types.h>
#include <vector>
#include <map>
#define rep(i, n) for (int i = 0; i < n; i++)
#define repi(i, n) for (int i = 1; i < n; i++)
#define eq(a, b) (strcmp(a, b) == 0)

#define ROM_NUM (64 * 1024) // 64KByte
#define RAM_NUM (${romSize})

#define MAX_INSTS 64 // 6bit

#define INTREG_NUM (${intRegNum})
#define FLOATREG_NUM (${floatRegNum})

% for constNum in xmlroot.find(".//CONST"):
#define ${constNum.tag} (${constNum.get("value")})
% endfor
% for inst in xmlroot.find(".//instructions"):
	% if not(inst.get("name") is None):
		% if inst.get("use") != "false":
			% if inst.get("op", "0").strip().isdigit():
#define ${inst.get("name").upper()} (${inst.get("op", "0").strip()})
			% endif
			% if inst.get("funct", "0").isdigit():
#define ${inst.get("name").upper() + "_F"} (${inst.get("funct", "0").strip()})
			% endif
		% endif
	% endif
% endfor

using namespace std;
#endif
