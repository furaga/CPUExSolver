<%
	intRegsNum = xmlroot.find(".//intRegs").get("num")
	intRegsPrefix = xmlroot.find(".//intRegs").get("prefix")
	r = intRegsPrefix % ()
	floatRegsNum = xmlroot.find(".//floatRegs").get("num")
	floatRegsPrefix = xmlroot.find(".//floatRegs").get("prefix")
	f = floatRegsPrefix % ()
	constFloatRegs = xmlroot.find(".//constFloatRegs").get("num")
	zeroReg = r + xmlroot.find(".//zeroReg").get("index")
	frameReg = r + xmlroot.find(".//frameReg").get("index")
	heapReg = r + xmlroot.find(".//heapReg").get("index")
	oneReg = r + xmlroot.find(".//oneReg").get("index")
	minusOneReg = r + xmlroot.find(".//minusOneReg").get("index")
	linkReg = r + xmlroot.find(".//linkReg").get("index")
	addressing = xmlroot.find(".//binary").get("addressing")
%>(*-----------------------------------------------------------------------------
 * 型の定義
 *-----------------------------------------------------------------------------*)
 
type id_or_imm = V of Id.t | C of int
type t =
	| Ans of exp
	| Let of (Id.t * Type.t) * exp * t
and exp =
	| Nop
	| Set of int
	| SetL of Id.l
	| Float of float
	| Mov of Id.t
	| Neg of Id.t
	| Add of Id.t * id_or_imm
	| Sub of Id.t * id_or_imm
	| Mul of Id.t * id_or_imm
	| Div of Id.t * id_or_imm
	| SLL of Id.t * id_or_imm
	| Ld of Id.t * id_or_imm
	| St of Id.t * Id.t * id_or_imm
	| FMov of Id.t
	| FNeg of Id.t
	| FAdd of Id.t * Id.t
	| FSub of Id.t * Id.t
	| FMul of Id.t * Id.t
	| FDiv of Id.t * Id.t
	| LdF of Id.t * id_or_imm
	| StF of Id.t * Id.t * id_or_imm
	| Comment of string
	| IfEq of Id.t * id_or_imm * t * t
	| IfLE of Id.t * id_or_imm * t * t
	| IfGE of Id.t * id_or_imm * t * t
	| IfFEq of Id.t * Id.t * t * t
	| IfFLE of Id.t * Id.t * t * t
	| CallCls of Id.t * Id.t list * Id.t list (* 関数呼び出し（クロージャ） *)
	| CallDir of Id.l * Id.t list * Id.t list (* 関数呼び出し（ラベル） *)
	| Save of Id.t * Id.t (* 退避 *)
	| Restore of Id.t (* 復元 *)
(* 関数定義 *)
type fundef = { name : Id.l; args : Id.t list; fargs : Id.t list; body : t; ret : Type.t }
(* プログラム全体 = 浮動小数点数テーブル + トップレベル関数 + メインの式 *)
type prog = Prog of fundef list * t


(*-----------------------------------------------------------------------------
 * 補助関数
 *-----------------------------------------------------------------------------*)

(* 2つのリストの差集合を取得 *)
let diff_list ls1 ls2 =
	List.fold_left (
		fun env x ->
			if List.mem x ls2 then env else x :: env
	) [] ls1


(*-----------------------------------------------------------------------------
 * 整数レジスタ
 *-----------------------------------------------------------------------------*)

(* ゼロレジスタ *)
let reg_0 = "${zeroReg}"	(* 常に０ *)
(* 1で固定するレジスタ *)
let reg_p1 = "${oneReg}"	(* 常に１ *)
(* -1で固定するレジスタ *)
let reg_m1 = "${minusOneReg}"	(* 常に-１ *)
(* ゼロレジスタ *)
let reg_sp = "${frameReg}" (* frame pointer *)
(* ヒープレジスタ *)
let reg_hp = "${heapReg}" (* heap pointer *)
% if linkReg == r:
(* リンクレジスタ（専用のレジスタを使用） *)
% else:
(* リンクレジスタ *)
% endif
let reg_lk = "${linkReg}"
(* すべての整数レジスタの配列 *)
let anyregs = Array.init ${intRegsNum} (Printf.sprintf "${intRegsPrefix}%d")
let regs_t =
	let ls1 = Array.to_list anyregs in
	let ls2 = [reg_0; reg_sp; reg_hp; reg_p1; reg_m1; reg_lk] in
	Array.of_list (List.rev (diff_list ls1 ls2))
(* クロージャのアドレスを入れるためのレジスタ *)
let reg_cl = regs_t.(Array.length regs_t - 1)
(* テンポラリレジスタ *)
let reg_sw = regs_t.(Array.length regs_t - 2)
(* 自由に使える整数レジスタの配列 *)
let regs = Array.append (Array.sub regs_t 0 (Array.length regs_t - 2)) (Array.init 1 (fun x -> reg_cl))
(* 自由に使える整数レジスタのリスト *)
let allregs = Array.to_list regs


(*-----------------------------------------------------------------------------
 * 浮動小数レジスタ
 *-----------------------------------------------------------------------------*)

(* 自由に使える浮動小数レジスタの数 *)
let freg_num = ${int(xmlroot.find(".//floatRegs").get("num")) - int(xmlroot.find(".//constFloatRegs").get("num"))}
(* 定数を格納する用の浮動小数レジスタのリスト *)
let reg_fgs = Array.to_list (Array.init (${floatRegsNum} - freg_num) (fun i -> Printf.sprintf "${floatRegsPrefix}%d" (freg_num + i)))
(* すべての浮動小数レジスタの配列 *)
let anyfregs = Array.init ${floatRegsNum} (Printf.sprintf "${floatRegsPrefix}%d")
let fregs_t = Array.init freg_num (Printf.sprintf "${floatRegsPrefix}%d")
(* テンポラリレジスタ（浮動小数レジスタ版）*)
let reg_fsw = fregs_t.(Array.length fregs_t - 1) (* temporary for swap *)
(* 自由に使える浮動小数レジスタの配列 *)
let fregs = Array.sub fregs_t 0 (Array.length fregs_t - 1)
(* 自由に使える浮動小数レジスタのリスト *)
let allfregs = Array.to_list fregs


(*-----------------------------------------------------------------------------
 * レジスタかどうかを判断
 *-----------------------------------------------------------------------------*)

let is_reg x = 
	let len_r = String.length "${r}" in
	let len_f = String.length "${f}" in
	(String.length x > len_r && String.sub x 0 len_r = "${r}") || (String.length x > len_f && String.sub x 0 len_f = "${f}")


(*-----------------------------------------------------------------------------
 *
 * 関数の実引数(arg_regs)・返り値(ret_reg)となるレジスタおよび関数内で殺されるレジスタ(use_regs)
 *
 * lib_asm.sにあるライブラリ関数などは、引数や使用するレジスタをハードコーディングしておく
 *
 *-----------------------------------------------------------------------------*)

type fundata = {arg_regs : Id.t list; ret_reg : Id.t; use_regs : S.t}
let fundata =
	ref (M.add_list [
		("min_caml_floor", 
			{	arg_regs = [fregs.(0)];
				ret_reg = fregs.(0);
				use_regs = S.of_list [regs.(0); regs.(1); fregs.(0); fregs.(1); fregs.(2); fregs.(3); fregs.(4)]
			});
		("min_caml_ceil", 
			{	arg_regs = [fregs.(0)];
				ret_reg = fregs.(0);
				use_regs = S.of_list [regs.(0); regs.(1); fregs.(0); fregs.(1); fregs.(2); fregs.(3); fregs.(4)]
			});
		("min_caml_float_of_int",
		 	{	arg_regs = [regs.(0)];
		 		ret_reg = fregs.(0);
		 		use_regs = S.of_list [regs.(0); regs.(1); regs.(2); fregs.(0); fregs.(1); fregs.(2)]
		 	});
		("min_caml_int_of_float",
			{	arg_regs = [fregs.(0)];
				ret_reg = regs.(0);
				use_regs = S.of_list [regs.(0); regs.(1); regs.(2); fregs.(0); fregs.(1); fregs.(2); fregs.(3); fregs.(4)]
			});
		("min_caml_truncate",
			{	arg_regs = [fregs.(0)];
				ret_reg = regs.(0);
				use_regs = S.of_list [regs.(0); regs.(1); regs.(2); fregs.(0); fregs.(1); fregs.(2); fregs.(3); fregs.(4)]
			});
		("min_caml_create_array",
			{	arg_regs = [regs.(0); regs.(1)];
				ret_reg = regs.(0);
				use_regs = S.of_list [regs.(0); regs.(1); regs.(2)]
			});
		("min_caml_create_float_array",
			{	arg_regs = [regs.(0); fregs.(0)];
				ret_reg = regs.(0);
				use_regs = S.of_list [regs.(0); regs.(1); fregs.(0)]
			});
		("min_caml_print_char",
			{	arg_regs = [regs.(0)];
				ret_reg = reg_0;
				use_regs = S.of_list [regs.(0)]
			});
		("min_caml_print_newline",
			{	arg_regs = [];
				ret_reg = reg_0;
				use_regs = S.of_list [regs.(0)]
			});
		("min_caml_write",
			{	arg_regs = [regs.(0)];
				ret_reg = regs.(0);
				use_regs = S.of_list [regs.(0)]
			});
		("min_caml_sqrt",
			{	arg_regs = [fregs.(0)];
				ret_reg = fregs.(0);
				use_regs = S.of_list [fregs.(0)]
			});
		("min_caml_newline",
			{	arg_regs = [];
				ret_reg = "${zeroReg}";
				use_regs = S.of_list [regs.(0)]
			});
		("min_caml_read_char",
			{	arg_regs = [];
				ret_reg = regs.(0);
				use_regs = S.of_list [regs.(0)]
			});
		("min_caml_read_int",
			{	arg_regs = [];
				ret_reg = regs.(0);
				use_regs = S.of_list [regs.(0); regs.(1)]
			});
		("min_caml_read_float",
			{	arg_regs = [];
				ret_reg = regs.(0);
				use_regs = S.of_list [regs.(0); regs.(1); fregs.(0)]
			});
		("min_caml_input_char",
			{	arg_regs = [];
				ret_reg = regs.(0);
				use_regs = S.of_list [regs.(0)]
			})
	] M.empty)


(*-----------------------------------------------------------------------------
 * 関数の引数・返り値・使用されるレジスタを取得
 *-----------------------------------------------------------------------------*)

let get_arg_regs x = try (M.find x !fundata).arg_regs with Not_found -> failwith (Printf.sprintf "Not_found %s\n" x)
let get_ret_reg x = try (M.find x !fundata).ret_reg with Not_found -> failwith (Printf.sprintf "Not_found %s\n" x)
let get_use_regs x = try (M.find x !fundata).use_regs with Not_found -> S.of_list (allregs @ allfregs)


(*-----------------------------------------------------------------------------
 * 式に含まれる自由変数の集合を取得する関数(fv)および補助関数群
 *-----------------------------------------------------------------------------*)

let rec remove_and_uniq xs = function
  | [] -> []
  | x :: ys when S.mem x xs -> remove_and_uniq xs ys
  | x :: ys -> x :: remove_and_uniq (S.add x xs) ys
let rec cat xs ys env =
	match xs with
		| [] -> ys
		| x :: xs when S.mem x env -> cat xs ys env
		| x :: xs -> x :: cat xs ys (S.add x env)
let fv_id_or_imm = function V(x) -> [x] | _ -> []
let rec fv' = function
	| Nop
	| Set _
	| SetL _
	| Comment _
	| Restore _
	| Float _ -> []
	| Mov x
	| Neg x
	| FMov x
	| FNeg x
	| Save (x, _) -> [x]
	| FAdd(x, y)
	| FSub(x, y)
	| FMul(x, y)
	| FDiv(x, y)
	| IfFEq(x, y, _, _)
	| IfFLE(x, y, _, _) -> [x; y]
	| Add (x, y')
	| Sub (x, y')
	| Mul(x, y')
	| Div(x, y')
	| SLL(x, y')
	| Ld(x, y')
	| LdF(x, y')
	| IfEq(x, y', _, _)
	| IfLE(x, y', _, _)
	| IfGE(x, y', _, _) -> x :: fv_id_or_imm y'
	| St(x, y, z')
	| StF(x, y, z') -> x :: y :: fv_id_or_imm z'
	| CallDir(_, ys, zs) -> ys @ zs
	| CallCls(x, ys, zs) -> x :: ys @ zs
let rec fv_exp env cont e =
	let xs = fv' e in
	match e with
		| IfEq (_, _, e1, e2)
		| IfLE (_, _, e1, e2)
		| IfGE (_, _, e1, e2)
		| IfFEq (_, _, e1, e2)
		| IfFLE (_, _, e1, e2) -> cat xs (fv env (fv env cont e2) e1) env
		| _ -> cat xs cont env
and fv env cont = function
	| Ans exp -> fv_exp env cont exp
	| Let ((x, t), exp, e) ->
		let cont' = fv (S.add x env) cont e in
		fv_exp env cont' exp
let fv e = remove_and_uniq S.empty (fv S.empty [] e)


(*-----------------------------------------------------------------------------
 * 式変形のための補助関数群（virtual.mlやregAlloc.mlなどで使用）
 *-----------------------------------------------------------------------------*)

let fletd(x, e1, e2) = Let((x, Type.Float), e1, e2)
let seq(e1, e2) = Let((Id.gentmp Type.Unit, Type.Unit), e1, e2)
let rec concat e1 xt e2 =
	match e1 with
		| Ans(exp) -> Let(xt, exp, e2)
		| Let(yt, exp, e1') -> Let(yt, exp, concat e1' xt e2)


(*-----------------------------------------------------------------------------
 * アラインメント
 *-----------------------------------------------------------------------------*)

let align i = ${"if i mod 4 = 0 then i else i + 4" if addressing == "byte" else "i"}


(*-----------------------------------------------------------------------------
 * デバッグ出力のための関数群
 *-----------------------------------------------------------------------------*)

let indent = Global.indent
let rec print n = function
	| Ans e -> (indent n; Printf.printf "Ans (\n"; print_exp (n + 1) e; indent n; Printf.printf ")\n")
	| Let ((id, typ), exp, e) -> (indent n; Printf.printf "Let %s =\n" id; print_exp (n + 1) exp; indent n; Printf.printf "In\n"; print n e)
and print_exp n = function
	| Nop -> (indent n; print_endline "Nop")
	| Set i -> (indent n; Printf.printf "Set (%d)\n" i)
	| SetL (Id.L label) -> (indent n; Printf.printf "Set (%s)\n" label)
	| Float f -> (indent n; Printf.printf "Float %f" f)
	| Mov s -> (indent n; Printf.printf "Mov (%s)\n" s)
	| Neg s -> (indent n; Printf.printf "Neg (%s)\n" s)
	| Add (s, V(v)) -> (indent n; Printf.printf "%s + %s\n" s v)
	| Add (s, C(c)) -> (indent n; Printf.printf "%s + %d\n" s c)
	| Sub (s, V(v)) -> (indent n; Printf.printf "%s - %s\n" s v)
	| Sub (s, C(c)) -> (indent n; Printf.printf "%s - %d\n" s c)
	| Mul (s, V(v)) -> (indent n; Printf.printf "%s * %s\n" s v)
	| Mul (s, C(c)) -> (indent n; Printf.printf "%s * %d\n" s c)
	| Div (s, V(v)) -> (indent n; Printf.printf "%s / %s\n" s v)
	| Div (s, C(c)) -> (indent n; Printf.printf "%s / %d\n" s c)
	| SLL (s, V(v)) -> (indent n; Printf.printf "%s << %s\n" s v)
	| SLL (s, C(c)) -> (indent n; Printf.printf "%s << %d\n" s c)
	| Ld (s, V(v)) -> (indent n; Printf.printf "Load %s[%s]\n" s v)
	| Ld (s, C(c)) -> (indent n; Printf.printf "Load %s[%d]\n" s c)
	| St (value, s, V(v)) -> (indent n; Printf.printf "Store %s to %s[%s]\n" value s v)
	| St (value ,s, C(c)) -> (indent n; Printf.printf "Store %s to %s[%d]\n" value s c)
	| FMov s -> (indent n; Printf.printf "FMov (%s)\n" s)
	| FNeg s -> (indent n; Printf.printf "FNeg (%s)\n" s)
	| FAdd (s, v) -> (indent n; Printf.printf "%s +. %s\n" s v)
	| FSub (s, v) -> (indent n; Printf.printf "%s -. %s\n" s v)
	| FMul (s, v) -> (indent n; Printf.printf "%s *. %s\n" s v)
	| FDiv (s, v) -> (indent n; Printf.printf "%s /. %s\n" s v)
	| LdF (s, V(v)) -> (indent n; Printf.printf "FLoad %s[%s]\n" s v)
	| LdF (s, C(c)) -> (indent n; Printf.printf "FLoad %s[%d]\n" s c)
	| StF (value, s, V(v)) -> (indent n; Printf.printf "FStore %s to %s[%s]\n" value s v)
	| StF (value ,s, C(c)) -> (indent n; Printf.printf "FStore %s to %s[%d]\n" value s c)
	| Comment s -> (indent n; Printf.printf "Comment [%s]" s)
	| IfEq (id, V(v), e1, e2) ->
		indent n;
		Printf.printf "If %s = %s Then\n" id v;
		print (n + 1) e1;
		indent n;
		Printf.printf "Then\n";
		print (n + 1) e2
	| IfEq (id, C(c), e1, e2) ->
		indent n;
		Printf.printf "If %s = %d Then\n" id c;
		print (n + 1) e1;
		indent n;
		Printf.printf "Then\n";
		print (n + 1) e2
	| IfLE (id, V(v), e1, e2) ->
		indent n;
		Printf.printf "If %s <= %s Then\n" id v;
		print (n + 1) e1;
		indent n;
		Printf.printf "Then\n";
		print (n + 1) e2
	| IfLE (id, C(c), e1, e2) ->
		indent n;
		Printf.printf "If %s <= %d Then\n" id c;
		print (n + 1) e1;
		indent n;
		Printf.printf "Then\n";
		print (n + 1) e2
	| IfGE (id, V(v), e1, e2) ->
		indent n;
		Printf.printf "If %s >= %s Then\n" id v;
		print (n + 1) e1;
		indent n;
		Printf.printf "Then\n";
		print (n + 1) e2
	| IfGE (id, C(c), e1, e2) ->
		indent n;
		Printf.printf "If %s >= %d Then\n" id c;
		print (n + 1) e1;
		indent n;
		Printf.printf "Then\n";
		print (n + 1) e2
	| IfFEq (id, v, e1, e2) ->
		indent n;
		Printf.printf "If %s =. %s Then\n" id v;
		print (n + 1) e1;
		indent n;
		Printf.printf "Then\n";
		print (n + 1) e2
	| IfFLE (id, v, e1, e2) ->
		indent n;
		Printf.printf "If %s <=. %s Then\n" id v;
		print (n + 1) e1;
		indent n;
		Printf.printf "Then\n";
		print (n + 1) e2
	| CallCls (addr, args, fargs) ->
		indent n;
		Printf.printf "CallCls %s " addr;
		List.iter (fun x -> Printf.printf "%s " x) args;
		List.iter (fun x -> Printf.printf "%s " x) fargs;
		print_newline ()
	| CallDir (Id.L addr, args, fargs) ->
		indent n;
		Printf.printf "CallDir %s " addr;
		List.iter (fun x -> Printf.printf "%s " x) args;
		List.iter (fun x -> Printf.printf "%s " x) fargs;
		print_newline ()
	| Save (id1, id2) -> (indent n; Printf.printf "Save %s, %s\n" id1 id2)
	| Restore id -> (indent n; Printf.printf "Restore %s\n" id)
and print_fundef n f =
	indent n;
	Type.print f.ret;
	Printf.printf " %s (" ((fun (Id.L x) -> x) f.name);
	List.iter (fun x -> Printf.printf "%s " x) f.args;
	List.iter (fun x -> Printf.printf "%s " x) f.fargs;
	Printf.printf ") =\n";
	print (n + 1) f.body
and print_prog n (Prog (fs, e)) =
	List.iter (fun x -> print_fundef n x) fs;
	print n e
let pp_id_or_imm = function
	| V x -> x
	| C i -> string_of_int i
