(*-----------------------------------------------------------------------------
 *
 * 複数のモジュールで使われる関数や変数を定義
 *
 *-----------------------------------------------------------------------------*)

(*-----------------------------------------------------------------------------
 * インデント文字列を返す（各型のprint系関数で使用）
 *-----------------------------------------------------------------------------*)
let rec indent i =
	if i <= 0 then
		()
	else (
		print_string "  ";
		indent (i - 1)
	)
		
(*-----------------------------------------------------------------------------
 * 現在行・現在列（parser.mlyなどで使用）
 *-----------------------------------------------------------------------------*)
let current_line = ref 1
let current_cols = ref [0]

(*-----------------------------------------------------------------------------
 * 入力をバイナリデータとして扱うか（main.mlで値を決定。emit.mlで使用）
 *-----------------------------------------------------------------------------*)
let use_binary_data = ref false

(*-----------------------------------------------------------------------------
 * ファイルの先頭からn文字目が何行何列目にあたるかを計算
 *-----------------------------------------------------------------------------*)
let get_position n =
	let rec get_position_sub n line = function
		| [] -> assert false
		| x :: xs ->
			if n >= x then
				(line, n - x)
			else
				get_position_sub n (line - 1) xs in
	get_position_sub n !current_line !current_cols
	
