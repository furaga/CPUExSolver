let limit = ref 1000

(*-----------------------------------------------------------------------------
 * KNormal.tに対して最適化処理をくりかえす 
 *-----------------------------------------------------------------------------*)

let rec iter n e =
  Format.eprintf "iteration(%d/%d)@." (!limit - n) !limit;
  if n = 0 then e else
  let e' =
	Elim.f (
		ConstFold.f(
			Gvn.f (
				ConstArray.f (
					Inline.f (
						Assoc.f (
							BetaTuple.f (
								Beta.f e))))))) in
  if e = e' then e else iter (n - 1) e'

(*-----------------------------------------------------------------------------
 * バッファをコンパイルしてチャンネルへ出力
 *-----------------------------------------------------------------------------*)

let lexbuf outchan l =
	Id.counter := 0;
	Typing.extenv := M.empty;
	let simm = 
		Simm.f
			(Sglobal.f
				(Virtual.f
					(Closure.f
						(GlobalEnv.f (* グローバル変数を取得 *)
							(iter !limit
								(Alpha.f
									(KNormal.f
										(Typing.f
											(Parser.exp Lexer.token l))))))))) in
	if !Closure.exist_cls then Emit.f outchan (RegAlloc.f simm)
	else Emit.f outchan (RegAllocWithColoring.f (Block.f simm))
	
(*-----------------------------------------------------------------------------
 * 文字列をコンパイルして標準出力に表示
 *-----------------------------------------------------------------------------*)

let string s = lexbuf stdout (Lexing.from_string s)

(*-----------------------------------------------------------------------------
 * ファイルをコンパイルしてファイルに出力
 *-----------------------------------------------------------------------------*)

let file f =
	let inchan = open_in (f ^ ".ml") in
	let outchan = open_out (f ^ ".s") in
	try
		Format.eprintf "<compile>@.";
		lexbuf outchan (Lexing.from_channel inchan);
		close_in inchan;
		close_out outchan
	with e -> (close_in inchan; close_out outchan; raise e)

(*-----------------------------------------------------------------------------
 * ここからコンパイラの実行が開始
 *-----------------------------------------------------------------------------*)

let () =
	let files = ref [] in
	Arg.parse
		[
			("--inline", Arg.Int(fun i -> Inline.threshold := i), "maximum size of functions inlined");
			("--iter", Arg.Int(fun i -> limit := i), "maximum number of optimizations iterated");
			("-b", Arg.Unit(fun i -> Global.use_binary_data := true), "assume input data is binary")
		]
		(fun s -> files := !files @ [s])
		("Mitou Min-Caml Compiler (C) Eijiro Sumii\n" ^ Printf.sprintf "usage: %s [-inline m] [-iter n] ...filenames without \".ml\"..." Sys.argv.(0));
	List.iter (fun f -> ignore (file f)) !files

