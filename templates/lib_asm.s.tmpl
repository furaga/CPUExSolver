<%
	r = xmlroot.find(".//intRegs").get("prefix") % ()
	f = xmlroot.find(".//floatRegs").get("prefix") % ()
	intRegsNum = int(xmlroot.find(".//intRegs").get("num"))
	floatRegsNum = int(xmlroot.find(".//floatRegs").get("num")) - int(xmlroot.find(".//constFloatRegs").get("num"))
	comment = xmlroot.find(".//comment").get("text")
	ZR = r + xmlroot.find(".//zeroReg").get("index")
	FR = r + xmlroot.find(".//frameReg").get("index")
	HR = r + xmlroot.find(".//heapReg").get("index")
	LR = r + xmlroot.find(".//linkReg").get("index")
	OR = r + xmlroot.find(".//oneReg").get("index")
	MR = r + xmlroot.find(".//minusOneReg").get("index")
	SPECIAL_REGS = [ZR, FR, HR, LR, OR, MR]
	IREGS = filter(lambda reg: reg not in SPECIAL_REGS, map(lambda i: r + str(i), range(intRegsNum)))
	FREGS = map(lambda i: f + str(i), range(floatRegsNum))
	constTableType = xmlroot.find(".//binary").get("constTableType").strip()
	addressing = xmlroot.find(".//binary").get("addressing")
	addressingUnit = 4 if addressing == "byte" else 1
%>${".init_heap_size\t0" if constTableType != "no_use" else ""}
##FLOAT_ONE:		${comment} 1.0
##	.long 0x3f800000
##FLOAT_MONE:		${comment} -1.0
##	.long 0xbf800000
##FLOAT_MAGICI:	${comment} 8388608
##	.long 0x800000
##FLOAT_MAGICF:	${comment} 8388608.0
##	.long 0x4b000000
##FLOAT_MAGICFHX:	${comment} 1258291200
##	.long 0x4b000000
${comment}----------------------------------------------------------------------
${comment}
${comment} 		↓　ここから lib_asm.s
${comment}
${comment}----------------------------------------------------------------------

${comment} * create_array
min_caml_create_array:
% if addressing == "byte":
	slli ${IREGS[0]}, ${IREGS[0]}, 2
% endif
	add ${IREGS[2]}, ${IREGS[0]}, ${HR}
	mov ${IREGS[0]}, ${HR}
CREATE_ARRAY_LOOP:
	jlt ${IREGS[2]}, ${HR}, CREATE_ARRAY_END
	jeq ${IREGS[2]}, ${HR}, CREATE_ARRAY_END
	sti ${IREGS[1]}, ${HR}, 0
	addi ${HR}, ${HR}, ${addressingUnit}
	jmp CREATE_ARRAY_LOOP
CREATE_ARRAY_END:
	return

${comment} * create_float_array
min_caml_create_float_array:
% if addressing == "byte":
	slli ${IREGS[0]}, ${IREGS[0]}, 2
% endif
	add ${IREGS[1]}, ${IREGS[0]}, ${HR}
	mov ${IREGS[0]}, ${HR}
CREATE_FLOAT_ARRAY_LOOP:
	jlt ${IREGS[1]}, ${HR}, CREATE_FLOAT_ARRAY_END
	jeq ${IREGS[1]}, ${HR}, CREATE_FLOAT_ARRAY_END
	fsti ${FREGS[0]}, ${HR}, 0
	addi ${HR}, ${HR}, ${addressingUnit}
	jmp CREATE_FLOAT_ARRAY_LOOP
CREATE_FLOAT_ARRAY_END:
	return

${comment} * floor		${FREGS[0]} + MAGICF - MAGICF
min_caml_floor:
	fmov ${FREGS[1]}, ${FREGS[0]}
	${comment} ${FREGS[4]} <- 0.0
	${comment} fset ${FREGS[4]}, 0.0
	fmvhi ${FREGS[4]}, 0
	fmvlo ${FREGS[4]}, 0
	fjlt ${FREGS[4]}, ${FREGS[0]}, FLOOR_POSITIVE	${comment} if (${FREGS[4]} <= ${FREGS[0]}) goto FLOOR_PISITIVE
	fjeq ${FREGS[4]}, ${FREGS[0]}, FLOOR_POSITIVE
FLOOR_NEGATIVE:
	fneg ${FREGS[0]}, ${FREGS[0]}
	${comment} ${FREGS[2]} <- 8388608.0(0x4b000000)
	fmvhi ${FREGS[2]}, 19200
	fmvlo ${FREGS[2]}, 0
	fjlt ${FREGS[0]}, ${FREGS[2]}, FLOOR_NEGATIVE_MAIN
	fjeq ${FREGS[0]}, ${FREGS[2]}, FLOOR_NEGATIVE_MAIN
	fneg ${FREGS[0]}, ${FREGS[0]}
	return
FLOOR_NEGATIVE_MAIN:
	fadd ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	fsub ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	fneg ${FREGS[1]}, ${FREGS[1]}
	fjlt ${FREGS[1]}, ${FREGS[0]}, FLOOR_RET2
	fjeq ${FREGS[1]}, ${FREGS[0]}, FLOOR_RET2
	fadd ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${comment} ${FREGS[3]} <- 1.0
	${comment} fset ${FREGS[3]}, 1.0
	fmvhi ${FREGS[3]}, 16256
	fmvlo ${FREGS[3]}, 0
	fadd ${FREGS[0]}, ${FREGS[0]}, ${FREGS[3]}
	fsub ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	fneg ${FREGS[0]}, ${FREGS[0]}
	return
FLOOR_POSITIVE:
	${comment} ${FREGS[2]} <- 8388608.0(0x4b000000)
	fmvhi ${FREGS[2]}, 19200
	fmvlo ${FREGS[2]}, 0
	fjlt ${FREGS[0]}, ${FREGS[2]}, FLOOR_POSITIVE_MAIN
	fjeq ${FREGS[0]}, ${FREGS[2]}, FLOOR_POSITIVE_MAIN
	return
FLOOR_POSITIVE_MAIN:
	fmov ${FREGS[1]}, ${FREGS[0]}
	fadd ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	fsti ${FREGS[0]}, ${FR}, 0
	ldi ${IREGS[1]}, ${FR}, 0
	fsub ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	fsti ${FREGS[0]}, ${FR}, 0
	ldi ${IREGS[1]}, ${FR}, 0
	fjlt ${FREGS[0]}, ${FREGS[1]}, FLOOR_RET
	fjeq ${FREGS[0]}, ${FREGS[1]}, FLOOR_RET
	${comment} ${FREGS[3]} <- 1.0
	${comment} fset ${FREGS[3]}, 1.0
	fmvhi ${FREGS[3]}, 16256
	fmvlo ${FREGS[3]}, 0
	fsub ${FREGS[0]}, ${FREGS[0]}, ${FREGS[3]}
FLOOR_RET:
	return
FLOOR_RET2:
	fneg ${FREGS[0]}, ${FREGS[0]}
	return
	
min_caml_ceil:
	fneg ${FREGS[0]}, ${FREGS[0]}
	call min_caml_floor
	fneg ${FREGS[0]}, ${FREGS[0]}
	return

${comment} * float_of_int
min_caml_float_of_int:
	jlt ${ZR}, ${IREGS[0]}, ITOF_MAIN		${comment} if (${ZR} <= ${IREGS[0]}) goto ITOF_MAIN
	jeq ${ZR}, ${IREGS[0]}, ITOF_MAIN
	sub ${IREGS[0]}, ${ZR}, ${IREGS[0]}
	call ITOF_MAIN
	fneg ${FREGS[0]}, ${FREGS[0]}
	return
ITOF_MAIN:
	${comment} ${FREGS[1]} <- 8388608.0(0x4b000000)
	fmvhi ${FREGS[1]}, 19200
	fmvlo ${FREGS[1]}, 0
	${comment} ${IREGS[1]} <- 0x4b000000
	mvhi ${IREGS[1]}, 19200
	mvlo ${IREGS[1]}, 0
	${comment} ${IREGS[2]} <- 0x00800000
	mvhi ${IREGS[2]}, 128
	mvlo ${IREGS[2]}, 0
	jlt ${IREGS[2]}, ${IREGS[0]}, ITOF_BIG
	jeq ${IREGS[2]}, ${IREGS[0]}, ITOF_BIG
	add ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	sti ${IREGS[0]}, ${FR}, 0
	fldi ${FREGS[0]}, ${FR}, 0
	fsub ${FREGS[0]}, ${FREGS[0]}, ${FREGS[1]}
	return
ITOF_BIG:
	${comment} ${FREGS[2]} <- 0.0
	${comment} fset ${FREGS[2]}, 0.0
	fmvhi ${FREGS[2]}, 0
	fmvlo ${FREGS[2]}, 0
ITOF_LOOP:
	sub ${IREGS[0]}, ${IREGS[0]}, ${IREGS[2]}
	fadd ${FREGS[2]}, ${FREGS[2]}, ${FREGS[1]}
	jlt ${IREGS[2]}, ${IREGS[0]}, ITOF_LOOP
	jeq ${IREGS[2]}, ${IREGS[0]}, ITOF_LOOP
	add ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	sti ${IREGS[0]}, ${FR}, 0
	fldi ${FREGS[0]}, ${FR}, 0
	fsub ${FREGS[0]}, ${FREGS[0]}, ${FREGS[1]}
	fadd ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	return

${comment} * int_of_float
min_caml_int_of_float:
	${comment} ${FREGS[1]} <- 0.0
	${comment} fset ${FREGS[1]}, 0.0
	fmvhi ${FREGS[1]}, 0
	fmvlo ${FREGS[1]}, 0
	fjlt ${FREGS[1]}, ${FREGS[0]}, FTOI_MAIN			${comment} if (0.0 <= ${FREGS[0]}) goto FTOI_MAIN
	fjeq ${FREGS[1]}, ${FREGS[0]}, FTOI_MAIN
	fneg ${FREGS[0]}, ${FREGS[0]}
	call FTOI_MAIN
	sub ${IREGS[0]}, ${ZR}, ${IREGS[0]}
	return
FTOI_MAIN:
	call min_caml_floor
	${comment} ${FREGS[2]} <- 8388608.0(0x4b000000)
	fmvhi ${FREGS[2]}, 19200
	fmvlo ${FREGS[2]}, 0
	${comment} ${IREGS[1]} <- 0x4b000000
	mvhi ${IREGS[1]}, 19200
	mvlo ${IREGS[1]}, 0
	fjlt ${FREGS[2]}, ${FREGS[0]}, FTOI_BIG		${comment} if (MAGICF <= ${FREGS[0]}) goto FTOI_BIG
	fjeq ${FREGS[2]}, ${FREGS[0]}, FTOI_BIG
	fadd ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	fsti ${FREGS[0]}, ${FR}, 0
	ldi ${IREGS[0]}, ${FR}, 0
	sub ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	return
FTOI_BIG:
	${comment} ${IREGS[2]} <- 0x00800000
	mvhi ${IREGS[2]}, 128
	mvlo ${IREGS[2]}, 0
	mov ${IREGS[0]}, ${ZR}
FTOI_LOOP:
	fsub ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	add ${IREGS[0]}, ${IREGS[0]}, ${IREGS[2]}
	fjlt ${FREGS[2]}, ${FREGS[0]}, FTOI_LOOP
	fjeq ${FREGS[2]}, ${FREGS[0]}, FTOI_LOOP
	fadd ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	fsti ${FREGS[0]}, ${FR}, 0
	ldi ${IREGS[2]}, ${FR}, 0
	sub ${IREGS[2]}, ${IREGS[2]}, ${IREGS[1]}
	add ${IREGS[0]}, ${IREGS[2]}, ${IREGS[0]}
	return
	
${comment} * truncate
min_caml_truncate:
	jmp min_caml_int_of_float
	
min_caml_read_int:
	addi ${IREGS[0]}, ${ZR}, 0
	${comment} 24 - 31
	input ${IREGS[1]}
	add ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	slli ${IREGS[0]}, ${IREGS[0]}, 8
	${comment} 16 - 23
	input ${IREGS[1]}
	add ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	slli ${IREGS[0]}, ${IREGS[0]}, 8
	${comment} 8 - 15
	input ${IREGS[1]}
	add ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	slli ${IREGS[0]}, ${IREGS[0]}, 8
	${comment} 0 - 7
	input ${IREGS[1]}
	add ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	return

min_caml_read_float:
	call min_caml_read_int
	sti ${IREGS[0]}, ${FR}, 0
	fldi ${FREGS[0]}, ${FR}, 0
	return

${comment}----------------------------------------------------------------------
${comment}
${comment} 		↑　ここまで lib_asm.s
${comment}
${comment}----------------------------------------------------------------------

