## 条件分岐は${getName("BLT")}, fljtは絶対あるものとする。
<%
	r = xmlroot.find(".//intRegs").get("prefix") % ()
	f = xmlroot.find(".//floatRegs").get("prefix") % ()
	intRegsNum = int(xmlroot.find(".//intRegs").get("num"))
	floatRegsNum = int(xmlroot.find(".//floatRegs").get("num")) - int(xmlroot.find(".//constFloatRegs").get("num"))
	comment = xmlroot.find(".//comment").get("text")
	ZR = r + xmlroot.find(".//zeroReg").get("index")
	FR = r + xmlroot.find(".//frameReg").get("index")
	HR = r + xmlroot.find(".//heapReg").get("index")
	LR = r + xmlroot.find(".//linkReg").get("index")
	OR = r + xmlroot.find(".//oneReg").get("index")
	MR = r + xmlroot.find(".//minusOneReg").get("index")
	SPECIAL_REGS = [ZR, FR, HR, LR, OR, MR]
	IREGS = filter(lambda reg: reg not in SPECIAL_REGS, map(lambda i: r + str(i), range(intRegsNum)))
	FREGS = map(lambda i: f + str(i), range(floatRegsNum))
	constTableType = xmlroot.find(".//binary").get("constTableType").strip()
	addressing = xmlroot.find(".//binary").get("addressing")
	addressingUnit = 4 if addressing == "byte" else 1

	def getInst(type):
		inst = xmlroot.find(".//" + type)
		assert inst is not None, "inst is None(" + type + ")"
		return inst
	
	def isUse(type):
		use = getInst(type).get("use", "true")
		return use != "false"
	
	def getName(type):
		if type == "SLLI" and not isUse("SLLI"):
			type = "SHIFTI"
		name = getInst(type).get("name")
		name is not None, "name is None(" + type + ")"
		return name

	def addi(rt, rs, imm):
		if isUse("ADDI"):
			return "%s %s, %s, %s" % (getName("ADDI"), rt, rs, str(imm))
		else:
			ans = "%s %s, %s\n" % (getName("SETHI"), IREGS[-2], str((int(imm) >> 16) & 0xffff))
			ans += "\t%s %s, %s\n" % (getName("SETLO"), IREGS[-2], str(int(imm) & 0xffff))
			ans += "\t%s %s, %s, %s" % (getName("ADD"), rt, rs, IREGS[-2])
			return ans

	def fsub(rd, rs, rt):
		if isUse("FSUB"):
			return "%s %s, %s, %s" % (getName("FSUB"), rd, rs, rt)
		else:
			ans = "%s %s, %s\n" % (getName("FNEG"), FREGS[-1], rt)
			ans += "\t%s %s, %s, %s" % (getName("FADD"), rd, rs, FREGS[-1])
			return ans

	def fldi(rt, rs, imm):
		if isUse("FLDI"):
			return "%s %s, %s, %s" % (getName("FLDI"), rt, rs, str(imm))
		elif isUse("LDI") and isUse("IMOVF"):
			ans = "%s %s, %s, %s\n" % (getName("LDI"), IREGS[-2], rs, str(imm))
			ans += "\t%s %s, %s" % (getName("IMOVF"), rt, IREGS[-2])
			return ans
		else:
			assert False, "this architecture must support LdFi or IMovF" 

	def fsti(rt, rs, imm):
		if isUse("FSTI"):
			return "%s %s, %s, %s" % (getName("FSTI"), rt, rs, str(imm))
		elif isUse("STI") and isUse("FMOVI"):
			ans = "%s %s, %s\n" % (getName("FMOVI"), IREGS[-2], rt)
			ans += "\t%s %s, %s, %s" % (getName("STI"), IREGS[-2], rs, str(imm))
			return ans
		else:
			assert False, "this architecture must support LdFi or IMovF" 

	def fset(rs, hi, lo, ss):
		if isUse("FSETHI") and isUse("FSETLO"):
			ans = "%s %s, %s\n" % (getName("FSETHI"), rs, str(hi))
			ans += "\t%s %s, %s" % (getName("FSETLO"), rs, str(lo))
			return ans
		else:
			ans = "%s %s, %s\n" % (getName("SETHI"), IREGS[-2], str(hi))
			ans += "\t%s %s, %s\n" % (getName("SETLO"), IREGS[-2], str(lo))
			ans += "\t%s %s, %s, %s\n" % (getName("STI"), IREGS[-2], FR, str(ss))
			ans += "\t%s\n" % fldi(rs, FR, str(ss))
			return ans

	def call(label):
		if isUse("CALL") and isUse("CALLREG") and isUse("RETURN"):
			return "%s %s" % (getName("CALL"), label)
		else:
			assert isUse("JMP_LNK") and isUse("JMPREG_LNK"), "[call()]%s and %s must be supported." % (getName("JMP_LNK"), getName("JMPREG_LNK"))
			assert LR != r, "[_return()] LR must be one of the intRegs."
			ans = "%s %s, %s, 0\n" % (getName("STI"), LR, FR)
			ans += "\t" + (addi(FR, FR, -addressingUnit)) + "\n"
			ans += "\t%s %s\n" % (getName("JMP_LNK"), label)
			ans += "\t" + (addi(FR, FR, addressingUnit)) + "\n"
			ans += "\t%s %s, %s, 0" % (getName("LDI"), LR, FR)
			return ans

	def _return():
		if isUse("CALL") and isUse("CALLREG") and isUse("RETURN"):
			return getName("RETURN")
		else:
			# LRは整数レジスタの一つのはず
			# リンクレジスタの退避とかは_call()の方で都合をつける
			assert LR != r, "[_return()] LR must be one of the intRegs."
			return "%s %s" % (getName("JMPREG"), LR)

%>${".init_heap_size\t0" if constTableType != "no_use" else ""}
##FLOAT_ONE:		${comment} 1.0
##	.long 0x3f800000
##FLOAT_MAGICI:	${comment} 8388608
##	.long 0x00800000
##FLOAT_MAGICF:	${comment} 8388608.0
##	.long 0x4b000000
##FLOAT_MAGICFHX:	${comment} 1258291200
##	.long 0x4b000000
${comment}----------------------------------------------------------------------
${comment}
${comment} lib_asm.s
${comment}
${comment}----------------------------------------------------------------------

${comment} * create_array
min_caml_create_array:
% if addressing == "byte":
	${getName("SLLI")} ${IREGS[0]}, ${IREGS[0]}, 2
% endif
	${getName("ADD")} ${IREGS[2]}, ${IREGS[0]}, ${HR}
	${getName("MOV")} ${IREGS[0]}, ${HR}
CREATE_ARRAY_LOOP:
	${getName("BLT")}  ${HR}, ${IREGS[2]}, CREATE_ARRAY_CONTINUE
	${_return()}
CREATE_ARRAY_CONTINUE:
	${getName("STI")} ${IREGS[1]}, ${HR}, 0	
	${addi(HR, HR, addressingUnit)}	
	${getName("BRANCH")} CREATE_ARRAY_LOOP

${comment} * create_float_array
min_caml_create_float_array:
% if addressing == "byte":
	${getName("SLLI")} ${IREGS[0]}, ${IREGS[0]}, 2
% endif
	${getName("ADD")} ${IREGS[1]}, ${IREGS[0]}, ${HR}
	${getName("MOV")} ${IREGS[0]}, ${HR}
CREATE_FLOAT_ARRAY_LOOP:
	${getName("BLT")} ${HR}, ${IREGS[1]}, CREATE_FLOAT_ARRAY_CONTINUE
	${_return()}
CREATE_FLOAT_ARRAY_CONTINUE:
	${fsti(FREGS[0], HR, 0)}
	${addi(HR, HR, addressingUnit)}
	${getName("BRANCH")} CREATE_FLOAT_ARRAY_LOOP

${comment} * floor		${FREGS[0]} + MAGICF - MAGICF
min_caml_floor:
	${getName("FMOV")} ${FREGS[1]}, ${FREGS[0]}
	${comment} ${FREGS[4]} <- 0.0
	${comment} fset ${FREGS[4]}, 0.0
	${fset(FREGS[4], 0, 0, 0)}
	${getName("FBLT")} ${FREGS[0]}, ${FREGS[4]}, FLOOR_NEGATIVE	${comment} if (${FREGS[4]} <= ${FREGS[0]}) goto FLOOR_PISITIVE
FLOOR_POSITIVE:
	${comment} ${FREGS[2]} <- 8388608.0(0x4b000000)
	${fset(FREGS[2], 19200, 0, 0)}
	${getName("FBLT")} ${FREGS[2]}, ${FREGS[0]}, FLOOR_POSITIVE_RET
FLOOR_POSITIVE_MAIN:
	${getName("FMOV")} ${FREGS[1]}, ${FREGS[0]}
	${getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${fsti(FREGS[0], FR, 0)}
	${getName("LDI")} ${IREGS[1]}, ${FR}, 0
	${fsub(FREGS[0], FREGS[0], FREGS[2])}
	${fsti(FREGS[0], FR, 0)}
	${getName("LDI")} ${IREGS[1]}, ${FR}, 0
	${getName("FBLT")} ${FREGS[1]}, ${FREGS[0]}, FLOOR_POSITIVE_RET
	${_return()}
FLOOR_POSITIVE_RET:
	${comment} ${FREGS[3]} <- 1.0
	${comment} fset ${FREGS[3]}, 1.0
	${fset(FREGS[3], 16256, 0, 0)}
	${fsub(FREGS[0], FREGS[0], FREGS[3])}
	${_return()}
FLOOR_NEGATIVE:
	${getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${comment} ${FREGS[2]} <- 8388608.0(0x4b000000)
	${fset(FREGS[2], 19200, 0, 0)}
	${getName("FBLT")} ${FREGS[2]}, ${FREGS[0]}, FLOOR_NEGATIVE_RET
FLOOR_NEGATIVE_MAIN:
	${getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${fsub(FREGS[0], FREGS[0], FREGS[2])}
	${getName("FNEG")} ${FREGS[1]}, ${FREGS[1]}
	${getName("FBLT")} ${FREGS[0]}, ${FREGS[1]}, FLOOR_NEGATIVE_PRE_RET
	${getName("BRANCH")} FLOOR_NEGATIVE_RET
FLOOR_NEGATIVE_PRE_RET:
	${getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${comment} ${FREGS[3]} <- 1.0
	${comment} fset ${FREGS[3]}, 1.0
	${fset(FREGS[3], 16256, 0, 0)}
	${getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[3]}
	${fsub(FREGS[0], FREGS[0], FREGS[2])}
FLOOR_NEGATIVE_RET:
	${getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${_return()}
	
min_caml_ceil:
	${getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${call("min_caml_floor")}
	${getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${_return()}

${comment} * float_of_int
min_caml_float_of_int:
	${getName("BLT")} ${IREGS[0]}, ${ZR}, ITOF_NEGATIVE_MAIN		${comment} if (${ZR} <= ${IREGS[0]}) goto ITOF_MAIN
ITOF_MAIN:
	${comment} ${FREGS[1]} <- 8388608.0(0x4b000000)
	${fset(FREGS[1], 19200, 0, 0)}
	${comment} ${IREGS[1]} <- 0x4b000000
	${getName("SETHI")} ${IREGS[1]}, 19200
	${getName("SETLO")} ${IREGS[1]}, 0
	${comment} ${IREGS[2]} <- 0x00800000
	${getName("SETHI")} ${IREGS[2]}, 128
	${getName("SETLO")} ${IREGS[2]}, 0
	${getName("BLT")} ${IREGS[0]}, ${IREGS[2]}, ITOF_SMALL
ITOF_BIG:
	${comment} ${FREGS[2]} <- 0.0
	${comment} fset ${FREGS[2]}, 0.0
	${fset(FREGS[2], 0, 0, 0)}
ITOF_LOOP:
	${getName("SUB")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[2]}
	${getName("FADD")} ${FREGS[2]}, ${FREGS[2]}, ${FREGS[1]}
	${getName("BLT")} ${IREGS[0]}, ${IREGS[2]}, ITOF_RET
	${getName("BRANCH")} ITOF_LOOP
ITOF_RET:
	${getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${getName("STI")} ${IREGS[0]}, ${FR}, 0
	${fldi(FREGS[0], FR, 0)}
	${fsub(FREGS[0], FREGS[0], FREGS[1])}
	${getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${_return()}
ITOF_SMALL:
	${getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${getName("STI")} ${IREGS[0]}, ${FR}, 0
	${fldi(FREGS[0], FR, 0)}
	${fsub(FREGS[0], FREGS[0], FREGS[1])}
	${_return()}
ITOF_NEGATIVE_MAIN:
	${getName("SUB")} ${IREGS[0]}, ${ZR}, ${IREGS[0]}
	${call("ITOF_MAIN")}
	${getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${_return()}

${comment} * int_of_float
min_caml_int_of_float:
	${comment} ${FREGS[1]} <- 0.0
	${comment} fset ${FREGS[1]}, 0.0
	${fset(FREGS[1], 0, 0, 0)}
	${getName("FBLT")} ${FREGS[0]}, ${FREGS[1]}, FTOI_NEGATIVE_MAIN			${comment} if (0.0 <= ${FREGS[0]}) goto FTOI_MAIN
FTOI_POSITIVE_MAIN:
	${call("min_caml_floor")}
	${comment} ${FREGS[2]} <- 8388608.0(0x4b000000)
	${fset(FREGS[2], 19200, 0, 0)}
	${comment} ${IREGS[1]} <- 0x4b000000
	${getName("SETHI")} ${IREGS[1]}, 19200
	${getName("SETLO")} ${IREGS[1]}, 0
	${getName("FBLT")} ${FREGS[0]}, ${FREGS[2]}, FTOI_SMALL		${comment} if (MAGICF <= ${FREGS[0]}) goto FTOI_BIG
	${comment} ${IREGS[2]} <- 0x00800000
	${getName("SETHI")} ${IREGS[2]}, 128
	${getName("SETLO")} ${IREGS[2]}, 0
	${getName("MOV")} ${IREGS[0]}, ${ZR}
FTOI_LOOP:
	${fsub(FREGS[0], FREGS[0], FREGS[2])}
	${getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[2]}
	${getName("FBLT")} ${FREGS[0]}, ${FREGS[2]}, FTOI_RET
	${getName("BRANCH")} FTOI_LOOP
FTOI_RET:
	${getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${fsti(FREGS[0], FR, 0)}
	${getName("LDI")} ${IREGS[2]}, ${FR}, 0
	${getName("SUB")} ${IREGS[2]}, ${IREGS[2]}, ${IREGS[1]}
	${getName("ADD")} ${IREGS[0]}, ${IREGS[2]}, ${IREGS[0]}
	${_return()}
FTOI_SMALL:
	${getName("FADD")} ${FREGS[0]}, ${FREGS[0]}, ${FREGS[2]}
	${fsti(FREGS[0], FR, 0)}
	${getName("LDI")} ${IREGS[0]}, ${FR}, 0
	${getName("SUB")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${_return()}
FTOI_NEGATIVE_MAIN:
	${getName("FNEG")} ${FREGS[0]}, ${FREGS[0]}
	${call("FTOI_POSITIVE_MAIN")}
	${getName("SUB")} ${IREGS[0]}, ${ZR}, ${IREGS[0]}
	${_return()}
	
${comment} * truncate
min_caml_truncate:
	${getName("BRANCH")} min_caml_int_of_float
	
${comment} ビッグエンディアン
min_caml_read_int:
	${getName("ADD")} ${IREGS[0]}, ${ZR}, ${ZR}
	${comment} 24 - 31
	${getName("INPUTBYTE")} ${IREGS[1]}
	${getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${getName("SLLI")} ${IREGS[0]}, ${IREGS[0]}, 8
	${comment} 16 - 23
	${getName("INPUTBYTE")} ${IREGS[1]}
	${getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${getName("SLLI")} ${IREGS[0]}, ${IREGS[0]}, 8
	${comment} 8 - 15
	${getName("INPUTBYTE")} ${IREGS[1]}
	${getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${getName("SLLI")} ${IREGS[0]}, ${IREGS[0]}, 8
	${comment} 0 - 7
	${getName("INPUTBYTE")} ${IREGS[1]}
	${getName("ADD")} ${IREGS[0]}, ${IREGS[0]}, ${IREGS[1]}
	${_return()}

min_caml_read_float:
	${call("min_caml_read_int")}
	${getName("STI")} ${IREGS[0]}, ${FR}, 0
	${fldi(FREGS[0], FR, 0)}
	${_return()}

${comment}----------------------------------------------------------------------
${comment}
${comment} lib_asm.s
${comment}
${comment}----------------------------------------------------------------------

