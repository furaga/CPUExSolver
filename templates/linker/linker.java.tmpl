<%
	# ラベルジャンプの命令名
	jmp = xmlroot.find(".//BRANCH").get("name")
%>import java.util.regex.*;
import java.io.*;

class linker
{
	public static void main(String args[])
	{
		try
		{
			int cnt = args.length;
			if (cnt < 2)
			{
				System.err.println("usage: java linker src1 [src2 src3 ...] dst");
				return;
			}

			System.err.print("<link> ");

			// ソースファイルを開く
			BufferedReader[] srcs = new BufferedReader[cnt - 1];
			for (int i = 0; i < cnt - 1; i++)
			{
				FileInputStream srcStream = new FileInputStream(args[i]);
				srcs[i] = new BufferedReader(new InputStreamReader(srcStream, "UTF-8"));
			}

			// 出力ファイルを開く
			FileOutputStream dstStream = new FileOutputStream(args[cnt - 1]);
			OutputStreamWriter dst = new OutputStreamWriter(dstStream, "UTF-8");
% if xmlroot.find(".//binary").get("constTableType") != "no_use":

			// 各ソースファイルのヒープサイズを読み込む
			int heapSum = 0;
			int[] heapSizes = new int[cnt - 1];
			Pattern heapSizePat = Pattern.compile("[.]init[_]heap[_]size[ \t]+(\\d+)");

			for (int i = 0; i < cnt - 1; i++)
			{
				String line = srcs[i].readLine();
				Matcher matcher = heapSizePat.matcher(line);
				if (matcher.find())
				{
					heapSizes[i] = Integer.parseInt(matcher.group(1));
					heapSum += heapSizes[i];
				}
				else
				{
					System.err.println("couldn't get heap size");
					return;
				}
			}

			dst.write(".init_heap_size\t" + heapSum + "\n");

			// 各ファイルのヒープ初期化部分を書き込む
			for (int i = 0; i < cnt - 1; i++)
			{
				while (heapSizes[i] > 0)
				{
					String line = srcs[i].readLine();
					if (line == null)
					{
						System.err.println("ヒープサイズとデータの数が一致しません");
						System.err.println("「ヒープサイズ / 32 = データの数」とならなければなりません");
						break;
					}	
					dst.write(line + "\n");
					line = line.trim();
					if (line.startsWith(".long") || line.startsWith(".float") || line.startsWith(".int")) 
					{
						heapSizes[i] -= 32;
					}
				}
			}
% endif

			// メイン関数へジャンプ
			dst.write("\t${jmp}\tmin_caml_start\n");
			
			// その他の部分を書き込んでファイルを閉じる
			Pattern gotoMainPat = Pattern.compile("${jmp}[ \t]+min[_]caml[_]start");
			for (int i = 0; i < cnt - 1; i++)
			{
				while (true)
				{
					String line = srcs[i].readLine();
					if (line == null) break;
					// メイン関数へのジャンプ「jmp min_caml_start」は無視する
					if (gotoMainPat.matcher(line).find() == false)
					{
						dst.write(line + "\n");
					}
				}
				srcs[i].close();
			}
			dst.close();
	
			for (int i = 0; i < cnt - 1; i++)
			{
				System.err.print(args[i] + " ");
			}
			System.err.println("=> " + args[cnt - 1]);
		}
		catch (IOException e)
		{
			// 例外を検出したらエラー終了する。Makefileが止まる
			System.out.println(e);
			System.exit(1);
		}
	}
}

