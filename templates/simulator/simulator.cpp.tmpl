<%
	debug_flg = False

	binary = xmlroot.find(".//binary")
	constTableType = binary.get("constTableType")
	constTableTag = binary.get("tag", "0xffFFffFF")
	addressing = binary.get("addressing")
	rom_addressing = binary.get("rom_addressing")
	
	zeroReg = xmlroot.find(".//zeroReg").get("index")
	assert zeroReg.isdigit(), "zeroReg is not digit"

	frameReg = xmlroot.find(".//frameReg").get("index")
	assert frameReg is not None, "frameReg is None"
	assert frameReg.isdigit(), "frameReg is not digit"

	heapReg = xmlroot.find(".//heapReg").get("index")
	assert heapReg is not None, "heapReg is None"
	assert heapReg.isdigit(), "heapReg is not digit"

	linkReg = xmlroot.find(".//linkReg").get("index")
	assert linkReg is not None, "linkReg is None"
	## リンクレジスタのindexが整数でないときは専用レジスタを使用する
	
	def getInst(type):
		inst = xmlroot.find(".//" + type)
		assert inst is not None, "inst is None(" + type + ")"
		return inst
	
	def getName(type):
		name = getInst(type).get("name")
		name is not None, "name is None(" + type + ")"
		return name
	
	def getOp(type):
		t_op = getInst(type).get("op")
		t_op is not None, "name is None(" + type + ")"
		return getName(type).upper() if not t_op.isalpha() else t_op
			
	def getFunct(type):
		return getName(type).upper() + "_F"

	def isUse(type):
		use = getInst(type).get("use", "true")
		return use != "false"
			
	def getInstsByOp(op):
		return filter(lambda inst: isUse(inst["type"]) and getOp(inst["type"]) == op, instInfo)

	def getInstsWithoutConstOp():
		return filter(lambda inst: isUse(inst["type"]) and not getInst(inst["type"]).get("op").isalpha(), instInfo)

	def getArgs(formAsm):
		xml_formAsm = getInst(inst["type"]).get("formAsm")
		if xml_formAsm is not None:
			xml_formAsm_list = filter(lambda x: x != "", map(lambda x: x.strip(), xml_formAsm.split(',')))
			if len(xml_formAsm_list) == len(formAsm):
				formAsm = xml_formAsm_list
		return {
			"arg0" : "" if len(formAsm) <= 0 else formAsm[0],
			"arg1" : "" if len(formAsm) <= 1 else formAsm[1],
			"arg2" : "" if len(formAsm) <= 2 else formAsm[2]
		 }

	constOps = xmlroot.find(".//CONST")
	
	endian = xmlroot.find(".//binary").get("endian")
	assert endian is not None, "endian is None"
%>#include "../include/common.h"
#include <cmath>
#include <cassert>
#include <fcntl.h>

// 命令の各要素にアクセスする関数を定義
${"""#define DEF_ELE_GET(name, shift, mask) \\
	uint32_t name(uint32_t inst) {\\
		return ((inst >> shift) & mask);\\
	}"""}
DEF_ELE_GET(get_opcode, 26, 0x3f)
DEF_ELE_GET(get_rs, 21, 0x1f)
DEF_ELE_GET(get_rt, 16, 0x1f)
DEF_ELE_GET(get_rd, 11, 0x1f)
DEF_ELE_GET(get_shamt, 6, 0x1f)
DEF_ELE_GET(get_funct, 0, 0x3f)
DEF_ELE_GET(get_address, 0, 0x3ffffff)
int32_t get_imm(uint32_t inst)
{
 	if (inst & (1 << 15))
 	{
		// 即値は負の数のとき符号拡張する
 		return (0xffff << 16) | (inst & 0xffff);
 	}
	return inst & 0xffff;
}

//------------------------------------------------------------------

// 整数レジスタ
int32_t ireg[INTREG_NUM];
// 浮動小数レジスタ
uint32_t freg[INTREG_NUM];
% if not linkReg.isdigit():
## 特別にリンクレジスタを用意する場合
// リンクレジスタ
uint32_t lreg;
% endif

// 即値
#define IMM get_imm(inst)
// rs（整数レジスタ）
#define IRS ireg[get_rs(inst)]
// rt（整数レジスタ）
#define IRT ireg[get_rt(inst)]
// rd（整数レジスタ）
#define IRD ireg[get_rd(inst)]
// rs（浮動小数レジスタ）
#define FRS freg[get_rs(inst)]
// rt（浮動小数レジスタ）
#define FRT freg[get_rt(inst)]
// rd（浮動小数レジスタ）
#define FRD freg[get_rd(inst)]
// フレームレジスタ
#define ZR ireg[${zeroReg}] 
// ヒープレジスタ
#define FR ireg[${frameReg}]
// ゼロレジスタ
#define HR ireg[${heapReg}]
// リンクレジスタ
#define LR ${"ireg[" + linkReg + "]" if linkReg.isdigit() else "lreg"}

//------------------------------------------------------------------

// アドレスをバイト/ワードアドレッシングに応じて変換
#define addr(x) (x${"" if addressing == "byte" else "/*"} / 4${"" if addressing == "byte" else "*/"})
#define rom_addr(x) (x${"" if rom_addressing == "byte" else "/*"} / 4${"" if rom_addressing == "byte" else "*/"})
#define ADDRESSING_UNIT	${"4" if addressing == "byte" else "1"}
#define ROM_ADDRESSING_UNIT	${"4" if rom_addressing == "byte" else "1"}

//------------------------------------------------------------------

// 停止命令か
#define isHalt(opcode, funct) (opcode == ${getOp("HALT")}${" && funct == " + getFunct("HALT") if getInst("HALT").get("funct") is not None and not getInst("HALT").get("funct").isalpha() else ""})

// 発行命令数
long long unsigned cnt;

// ROM
uint32_t ROM[ROM_NUM];
// RAM
uint32_t RAM[(int)(RAM_NUM * 1024 * 1024 / 4)];
// プログラムカウンタ
uint32_t pc;

typedef union{	uint32_t i; float f;} conv;

uint32_t myfadd(uint32_t rs, uint32_t rt)
{
	conv a, b, c;
	a.i = rs;
	b.i = rt;
	c.f = a.f + b.f;
	return c.i;
}
uint32_t myfsub(uint32_t rs, uint32_t rt)
{
	conv a, b, c;
	a.i = rs;
	b.i = rt;
	c.f = a.f - b.f;
	return c.i;
}
uint32_t myfmul(uint32_t rs, uint32_t rt)
{
	conv a, b, c;
	a.i = rs;
	b.i = rt;
	c.f = a.f * b.f;
	return c.i;
}
uint32_t myfdiv(uint32_t rs, uint32_t rt)
{
	conv a, b, c;
	a.i = rs;
	b.i = rt;
	c.f = a.f / b.f;
	return c.i;
}
uint32_t myfinv(uint32_t rs)
{
	conv a, b;
	a.i = rs;
	b.f = 1 / a.f;
	return b.i;
}
uint32_t myfsqrt(uint32_t rs)
{
	conv a, b;
	a.i = rs;
	b.f = sqrt(a.f);
	return b.i;
}
uint32_t myfabs(uint32_t rs)
{
	conv a, b;
	a.i = rs;
	b.f = abs(a.f);
	return b.i;
}
uint32_t myfneg(uint32_t rs)
{
	conv a, b;
	a.i = rs;
	b.f = -a.f;
	return b.i;
}
uint32_t myfloor(uint32_t rs)
{
	conv a, b;
	a.i = rs;
	b.f = floor(a.f);
	return b.i;
}
uint32_t myfsin(uint32_t rs)
{
	conv a, b;
	a.i = rs;
	b.f = sin(a.f);
	return b.i;
}
uint32_t myfcos(uint32_t rs)
{
	conv a, b;
	a.i = rs;
	b.f = cos(a.f);
	return b.i;
}
uint32_t myftan(uint32_t rs)
{
	conv a, b;
	a.i = rs;
	b.f = tan(a.f);
	return b.i;
}
uint32_t myfatan(uint32_t rs)
{
	conv a, b;
	a.i = rs;
	b.f = atan(a.f);
	return b.i;
}
float asF(uint32_t r)
{
	conv a;
	a.i = r;
	return a.f;
}

//-----------------------------------------------------------------------------
//
// エンディアンの変換
//
//-----------------------------------------------------------------------------

#define toggle_endian(data) ((data << 24) | ((data << 8) & 0x00ff0000) | ((data >> 8) & 0x0000ff00) | ((data >> 24) & 0x000000ff))

% if constTableType != "no_use":
//-----------------------------------------------------------------------------
//
// 定数テーブルをヒープに書き込む
//
//-----------------------------------------------------------------------------
void initializeHeap()
{
	% if constTableType == "writeSize":
	// バイナリの最初の１ワード目に定数テーブルのサイズが書かれている
	int heapSize = ${"toggle_endian(ROM[0])" if endian == "BIG" else "ROM[0]"};
	pc += ROM_ADDRESSING_UNIT;
//	cerr << "heapSize = " << heapSize << endl;
	while (heapSize > 0)
	{
		assert(rom_addr(pc) >= 0);
		assert(rom_addr(HR) >= 0);
		RAM[addr(HR)] = ${"toggle_endian(ROM[rom_addr(pc)])" if endian == "BIG" else "ROM[rom_addr(pc)]"};
		heapSize -= ADDRESSING_UNIT;
		HR += ADDRESSING_UNIT;
		pc += ROM_ADDRESSING_UNIT;
	}
	% elif constTableType == "toTag":
	// constTableTagが来るまでを定数テーブルとする
	assert(rom_addr(pc) >= 0);
	while (${"toggle_endian(ROM[rom_addr(pc)])" if endian == "BIG" else "ROM[rom_addr(pc)]"} != ${constTableTag})
	{
		assert(rom_addr(pc) >= 0);
		assert(rom_addr(HR) >= 0);
		RAM[addr(HR)] = ${"toggle_endian(ROM[rom_addr(pc)])" if endian == "BIG" else "ROM[rom_addr(pc)]"};
		HR += ADDRESSING_UNIT;
		pc += ROM_ADDRESSING_UNIT;
	}
	pc += ROM_ADDRESSING_UNIT;
	% endif
}

% endif
//-----------------------------------------------------------------------------
//
// シミュレート
//
//-----------------------------------------------------------------------------
int simulate(char* srcPath)
{
	uint32_t inst;

	uint8_t opcode, funct;
	
	conv tmp1;

	// 初期化
	FR = sizeof(RAM)${" - 4" if addressing == "byte" else " / 4 - 1"};
	// cerr << "FR = " << FR << endl;

	// バイナリを読み込む
	FILE* srcFile = fopen(srcPath, "rb");
	if (srcFile == NULL)
	{
		cerr << "couldn't open " << srcPath << endl;
		return 1;
	}
	fread(ROM, 4 * ROM_NUM, 1, srcFile);
	fclose(srcFile);
	
	cerr << srcPath << endl;

% if constTableType != "no_use":
	// ヒープの初期化
	initializeHeap();

% endif
	// メインループ
	do
	{
		bool error = false;
	
		ZR = 0;

		// フレーム/ヒープレジスタは絶対に負になることはない
		if (FR < 0)
		{
			cerr << "error> Frame Register(reg[${frameReg}]) has become less than 0." << endl;
			break;
		}
		if(HR < 0) 
		{
			cerr << "error> Heap Register(reg[${heapReg}]) has become less than 0." << endl;
			break;
		}

		assert(rom_addr(pc) >= 0);
		inst = ${"toggle_endian(ROM[rom_addr(pc)])" if endian == "BIG" else "ROM[rom_addr(pc)]"};

		opcode = get_opcode(inst);
		funct = get_funct(inst);
% if debug_flg:
/*		cerr << "pc = " << pc;
		cerr << ", inst = " << inst;		
		cerr << ", opcode = " << (int)opcode;
		cerr << ", funct = " << (int)funct << endl;
		for (int i = 0; i < 15; i++)
		{
			cerr << "RAM[" << i << "] = " << RAM[i] << endl;
		}*/
% endif
		if (ireg[0] != 0)
		{
			cerr << "g0 = " << ireg[0] << endl;
			exit(-1);
		}

		cnt++;
		pc += ROM_ADDRESSING_UNIT;

		// 1億命令発行されるごとにピリオドを一個ずつ出力する（どれだけ命令が発行されたか視覚的にわかりやすくなる）
		if (!(cnt % (100000000)))
		{
			cerr << "." << flush;
		}
		
		// 読み込んだopcode・functに対応する命令を実行する
		switch(opcode)
		{
% for constOp in constOps.getiterator()[1:]:
			case ${constOp.tag}:
				switch (funct)
				{
	% for inst in getInstsByOp(constOp.tag):
					case ${getName(inst["type"]).upper()}_F:
		% if debug_flg:
						cerr << "${getName(inst["type"])} " << endl;
						cerr << "\trs = " << get_rs(inst) << ", " << IRS << endl;
						cerr << "\trt = " << get_rt(inst) << ", " << IRT << endl;
						cerr << "\trd = " << get_rd(inst) << ", " << IRD << endl;
						cerr << "\timm = " << get_imm(inst) << ", " << IMM << endl;
						cerr << "\taddr = " << get_address(inst) << endl;
		% endif
		% for code in inst["code"]:
						${code % getArgs(inst["formAsm"])};
		% endfor
						break;
	% endfor
					default:
						break;
				}			
				break;
% endfor
% for inst in getInstsWithoutConstOp():
			case ${getName(inst["type"]).upper()}:
	% if debug_flg:
				cerr << "${getName(inst["type"])} " << endl;
				cerr << "\trs = " << get_rs(inst) << ", " << IRS << endl;
				cerr << "\trt = " << get_rt(inst) << ", " << IRT << endl;
				cerr << "\trd = " << get_rd(inst) << ", " << IRD << endl;
				cerr << "\timm = " << get_imm(inst) << ", " << IMM << endl;
				cerr << "\taddr = " << get_address(inst) << endl;	
	% endif
	% for code in inst["code"]:
				${code % getArgs(inst["formAsm"])};
	% endfor
				break;
% endfor
			default:
				cerr << "invalid opcode. (opcode = " << (int)opcode << ", funct = " << (int)funct <<  ", pc = " << pc << ")" << endl;
				break;
		}
	}
	while (!isHalt(opcode, funct)); // ${xmlroot.find(".//HALT").get("name")}が来たら終了

	// 発行命令数を表示
	cerr << "\n" << cnt << " instructions had been issued" << endl;

	return 0;
} 

int main(int argc, char** argv)
{
	if (argc <= 1)
	{
		cerr << "usage: ./simulator binaryfile" << endl;
		return 1;
	}
	
	cerr << "<simulate> ";
	
	simulate(argv[1]);

	return 0;
}
